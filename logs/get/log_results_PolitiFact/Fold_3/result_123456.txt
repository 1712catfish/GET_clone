============= FOLD 3 ========================
{
  "article_src_emb_size": 128,
  "batch_size": 32,
  "claim_src_emb_size": 128,
  "cuda": 1,
  "dataset": "PolitiFact",
  "debug": 1,
  "decay_step": 100,
  "decay_weight": 0.0001,
  "dropout_left": 0.2,
  "dropout_right": 0.2,
  "early_stopping": 10,
  "epochs": 30,
  "fixed_length_left": 30,
  "fixed_length_left_src_chars": 20,
  "fixed_length_right": 100,
  "fixed_length_right_src_chars": 20,
  "fixed_num_evidences": 30,
  "gnn_dropout": 0.2,
  "gnn_window_size": 3,
  "gsl_rate": 0.6,
  "hidden_size": 300,
  "log": "logs/get",
  "loss_type": "cross_entropy",
  "lr": 0.0001,
  "num_att_heads_for_evds": 1,
  "num_att_heads_for_words": 3,
  "num_classes": 2,
  "num_folds": 5,
  "optimizer": "adam",
  "path": "formatted_data/declare/",
  "secondary_log_folder": "logs/get/log_results_PolitiFact",
  "seed": 123456,
  "use_article_source": 1,
  "use_claim_source": 1,
  "verbose": 1,
  "word_embedding_size": 300
}
Setting seed to 123456
Min query length, 24 Min doc length 100
Max query length, 25 Max doc length 100
Converting DataFrame to Normal Dictionary of Data
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
Converting DataFrame to Normal Dictionary of Data
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
Converting DataFrame to Normal Dictionary of Data
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
done extracting
loading data time: 75 (seconds)
Building model
Word hit: (32328, 32330) 99.99381379523662
Fitting Model
Using: <function cross_entroy at 0x7fbec1fdeb90>
|Epoch 000 | Train loss: 54.446| Val AUC = 0.700
|Epoch 001 | Train loss: 50.713| Val AUC = 0.727
|Epoch 002 | Train loss: 48.824| Val AUC = 0.759
|Epoch 003 | Train loss: 46.291| Val AUC = 0.772
|Epoch 004 | Train loss: 45.141| Val AUC = 0.774
|Epoch 005 | Test F1_macro = 0.65884 | Testing time: 03.1(s)
|Epoch 005 | Train loss: 43.782| Val AUC = 0.790
|Epoch 006 | Train loss: 42.455| Val AUC = 0.788
|Epoch 007 | Train loss: 41.519| Val AUC = 0.800
|Epoch 008 | Train loss: 39.675| Val AUC = 0.802
|Epoch 009 | Train loss: 38.857| Val AUC = 0.811
|Epoch 010 | Test F1_macro = 0.68619 | Testing time: 03.2(s)
|Epoch 010 | Train loss: 36.813| Val AUC = 0.818
|Epoch 011 | Train loss: 36.766| Val AUC = 0.813
|Epoch 012 | Train loss: 33.946| Val AUC = 0.820
|Epoch 013 | Train loss: 33.021| Val AUC = 0.816
|Epoch 014 | Train loss: 32.158| Val AUC = 0.816
|Epoch 015 | Test F1_macro = 0.64518 | Testing time: 03.6(s)
|Epoch 015 | Train loss: 30.755| Val AUC = 0.820
|Epoch 016 | Train loss: 29.471| Val AUC = 0.822
|Epoch 017 | Train loss: 27.911| Val AUC = 0.824
|Epoch 018 | Train loss: 26.595| Val AUC = 0.818
|Epoch 019 | Train loss: 25.112| Val AUC = 0.820
|Epoch 020 | Test F1_macro = 0.68438 | Testing time: 02.4(s)
|Epoch 020 | Train loss: 24.267| Val AUC = 0.816
|Epoch 021 | Train loss: 22.169| Val AUC = 0.810
|Epoch 022 | Train loss: 21.184| Val AUC = 0.812
|Epoch 023 | Train loss: 19.392| Val AUC = 0.806
|Epoch 024 | Train loss: 18.918| Val AUC = 0.808
|Epoch 025 | Test F1_macro = 0.67697 | Testing time: 03.3(s)
|Epoch 025 | Train loss: 17.316| Val AUC = 0.814
|Epoch 026 | Train loss: 16.057| Val AUC = 0.816
|Epoch 027 | Train loss: 15.163| Val AUC = 0.814
|Epoch 028 | Train loss: 14.151| Val AUC = 0.807
Early Stopped due to no better performance in 11 epochs
Closing tensorboard
Best result: | vad F1_macro = 0.75339 | epoch = 17
Best Vad F1_macro = 0.75339 | Best Vad AUC = 0.82385| Best Test F1_macro = 0.66498 | Best Test F1_micro = 0.68069 | Best Vad AUC = 0.75021 
| Best Test Precision_True_class = 0.64719 | Best Test Recall_True_class = 0.85714 | Best Test F1_True_class = 0.73752 
| Best Test Precision_False_class = 0.75635 | Best Test_Recall_False class = 0.48693 | Best Test F1_False_class = 0.59245 
| Best Test Precision_Mixed_class = 0.00000 | Best Test_Recall_Mixed_class = 0.00000 | Best Test F1_Mixed_class = 0.00000 
Total time for one fold:  354 (seconds)
