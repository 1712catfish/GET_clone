============= FOLD 1 ========================
{
  "article_src_emb_size": 128,
  "batch_size": 32,
  "claim_src_emb_size": 128,
  "cuda": 1,
  "dataset": "PolitiFact",
  "debug": 1,
  "decay_step": 100,
  "decay_weight": 0.0001,
  "dropout_left": 0.2,
  "dropout_right": 0.2,
  "early_stopping": 10,
  "epochs": 30,
  "fixed_length_left": 30,
  "fixed_length_left_src_chars": 20,
  "fixed_length_right": 100,
  "fixed_length_right_src_chars": 20,
  "fixed_num_evidences": 30,
  "gnn_dropout": 0.2,
  "gnn_window_size": 3,
  "gsl_rate": 0.6,
  "hidden_size": 300,
  "log": "logs/get",
  "loss_type": "cross_entropy",
  "lr": 0.0001,
  "num_att_heads_for_evds": 1,
  "num_att_heads_for_words": 3,
  "num_classes": 2,
  "num_folds": 5,
  "optimizer": "adam",
  "path": "formatted_data/declare/",
  "secondary_log_folder": "logs/get/log_results_PolitiFact",
  "seed": 123456,
  "use_article_source": 1,
  "use_claim_source": 1,
  "verbose": 1,
  "word_embedding_size": 300
}
Setting seed to 123456
Min query length, 22 Min doc length 100
Max query length, 25 Max doc length 100
Converting DataFrame to Normal Dictionary of Data
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
Converting DataFrame to Normal Dictionary of Data
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
Converting DataFrame to Normal Dictionary of Data
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
[NOTICE] MatchZoo use queryID and docID as index in dataframe left and right, therefore, iterrows will return index which is left_id or right_id
done extracting
loading data time: 74 (seconds)
Building model
Word hit: (32397, 32399) 99.99382696996821
Fitting Model
Using: <function cross_entroy at 0x7fbec1fdeb90>
|Epoch 000 | Train loss: 54.646| Val AUC = 0.708
|Epoch 001 | Train loss: 52.096| Val AUC = 0.722
|Epoch 002 | Train loss: 49.300| Val AUC = 0.760
|Epoch 003 | Train loss: 47.126| Val AUC = 0.761
|Epoch 004 | Train loss: 45.538| Val AUC = 0.776
|Epoch 005 | Test F1_macro = 0.66444 | Testing time: 02.4(s)
|Epoch 005 | Train loss: 44.349| Val AUC = 0.781
|Epoch 006 | Train loss: 43.036| Val AUC = 0.785
|Epoch 007 | Train loss: 41.744| Val AUC = 0.791
|Epoch 008 | Train loss: 40.508| Val AUC = 0.799
|Epoch 009 | Train loss: 39.782| Val AUC = 0.795
|Epoch 010 | Test F1_macro = 0.68476 | Testing time: 02.6(s)
|Epoch 010 | Train loss: 37.875| Val AUC = 0.803
|Epoch 011 | Train loss: 36.430| Val AUC = 0.798
|Epoch 012 | Train loss: 34.961| Val AUC = 0.802
|Epoch 013 | Train loss: 33.912| Val AUC = 0.793
|Epoch 014 | Train loss: 33.407| Val AUC = 0.803
|Epoch 015 | Test F1_macro = 0.67606 | Testing time: 03.3(s)
|Epoch 015 | Train loss: 31.600| Val AUC = 0.792
|Epoch 016 | Train loss: 30.726| Val AUC = 0.791
|Epoch 017 | Train loss: 29.051| Val AUC = 0.790
|Epoch 018 | Train loss: 26.710| Val AUC = 0.792
|Epoch 019 | Train loss: 27.667| Val AUC = 0.790
Early Stopped due to no better performance in 11 epochs
Closing tensorboard
Best result: | vad F1_macro = 0.72491 | epoch = 8
Best Vad F1_macro = 0.72491 | Best Vad AUC = 0.79870| Best Test F1_macro = 0.68008 | Best Test F1_micro = 0.68847 | Best Vad AUC = 0.75808 
| Best Test Precision_True_class = 0.66585 | Best Test Recall_True_class = 0.81250 | Best Test F1_True_class = 0.73190 
| Best Test Precision_False_class = 0.72845 | Best Test_Recall_False class = 0.55229 | Best Test F1_False_class = 0.62825 
| Best Test Precision_Mixed_class = 0.00000 | Best Test_Recall_Mixed_class = 0.00000 | Best Test F1_Mixed_class = 0.00000 
Total time for one fold:  265 (seconds)
